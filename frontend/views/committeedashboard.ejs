<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Committee Dashboard | Mess Management Portal</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/css/styles.css">
</head>
<body>
    <!-- Navbar -->
    <nav class="navbar navbar-expand-lg navbar-dark">
        <div class="container">
            <a class="navbar-brand" href="/">Mess Management Portal</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav ms-auto">
                    <li class="nav-item">
                        <a href="/auth/committeeprofile" class="btn btn-outline-primary me-2">
                            <i class="bi bi-person-circle"></i> Profile
                        </a>
                    </li>
                    <li class="nav-item">
                        <a href="javascript:void(0);" onclick="logoutUser()" class="btn btn-outline-danger">
                            <i class="bi bi-box-arrow-right"></i> Logout
                        </a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <!-- Dashboard Layout -->
    <div class="dashboard-container">
        <!-- Sidebar -->
        <div class="sidebar">
            <h4>Hello, <span id="committeeUserName">Committee Member</span>!</h4>
            <a href="#update-mess-timings" class="sidebar-option" onclick="showFeature('update-mess-timings')">
                <i class="bi bi-clock"></i> Update Mess Timings
            </a>
            <a href="#update-mess-menu" class="sidebar-option" onclick="showFeature('update-mess-menu')">
                <i class="bi bi-card-list"></i> Update Mess Menu
            </a>
            <a href="#review-feedback" class="sidebar-option" onclick="showFeature('review-feedback')">
                <i class="bi bi-chat-dots"></i> Review Students Feedback
            </a>
            <a href="#review-rebates" class="sidebar-option" onclick="showFeature('review-rebates')">
                <i class="bi bi-check-square"></i> Review Rebate Applications
            </a>
            <a href="#post-notices" class="sidebar-option" onclick="showFeature('post-notices')">
                <i class="bi bi-exclamation-circle"></i> Post Important Notices
            </a>
            <a href="#track-expenses" class="sidebar-option" onclick="showFeature('track-expenses')">
                <i class="bi bi-graph-up"></i> Track Expenses
            </a>
            <a href="#manage-inventory" class="sidebar-option" onclick="showFeature('manage-inventory')">
                <i class="bi bi-box-seam"></i> Manage Inventory
            </a>
            <a href="#view-employees" class="sidebar-option" onclick="showFeature('view-employees')">
                <i class="bi bi-people-fill"></i> View Employee Info
            </a>
            <a href="#add-food-items" class="sidebar-option" onclick="showFeature('add-food-items')">
                <i class="bi bi-basket"></i> View and Add Food Items
            </a>
        </div>

        <!-- Content Area -->
        <div class="content">
            <div id="feature-content">
                <div class="d-flex align-items-center justify-content-center" style="height: 80vh;">
                    <div class="text-center">
                        <i class="bi bi-arrow-left-circle" style="font-size: 3rem; color: var(--primary);"></i>
                        <h3 class="mt-3">Welcome to your dashboard!</h3>
                        <p class="text-muted">Select an option from the sidebar to get started.</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            fetch('/auth/committeedashboard/data', {
                method: 'GET',
                headers: {
                    Authorization: `Bearer ${localStorage.getItem('token')}`
                }
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Authorization failed');
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('Authenticated data:', data);
                    document.getElementById('committeeUserName').innerText = data.user.name;
                })
                .catch(error => {
                    console.error('Error fetching data:', error);
                    alert('Session expired. Redirecting to login.');
                    window.location.href = '/auth/login';
                });
        });

        function logoutUser() {
            fetch("/auth/logout", {
                method: "GET",
                headers: {
                    Authorization: `Bearer ${localStorage.getItem("token")}`,
                },
            })
                .then((response) => {
                    if (!response.ok) {
                        throw new Error("Logout failed.");
                    }
                    return response.json();
                })
                .then((data) => {
                    console.log(data.message);
                    localStorage.removeItem("token");
                    alert("You have been logged out.");
                    window.location.href = "/";
                })
                .catch((error) => {
                    console.error("Error during logout:", error);
                    alert("An error occurred while logging out.");
                });
        }

        function showFeature(feature) {
            // Reset active class for sidebar options
            const options = document.querySelectorAll('.sidebar-option');
            options.forEach(option => option.classList.remove('active'));

            // Set the clicked option as active
            document.querySelector(`[href="#${feature}"]`).classList.add('active');

            // Dynamically update the content area
            const content = document.getElementById('feature-content');
            
            if (feature === 'post-notices') {
                content.innerHTML = `
                    <div class="card shadow-sm">
                        <div class="card-header bg-coffee">
                            <h3 class="card-title mb-0"><i class="bi bi-exclamation-circle me-2"></i>Post Important Notices</h3>
                        </div>
                        <div class="card-body">
                            <p class="card-text text-muted mb-4">Share important announcements with all students</p>
                            
                            <form id="noticeForm" class="form" onsubmit="submitNotice(event)">
                                <div class="mb-3">
                                    <label for="noticeTitle" class="form-label">Notice Title:</label>
                                    <input type="text" id="noticeTitle" class="form-control" placeholder="Enter a clear and concise title" required>
                                </div>
                                <div class="mb-3">
                                    <label for="noticeContent" class="form-label">Notice Content:</label>
                                    <textarea id="noticeContent" class="form-control" rows="6" placeholder="Enter the detailed notice content" required></textarea>
                                </div>
                                <button type="submit" class="btn btn-primary">
                                    <i class="bi bi-send me-2"></i>Post Notice
                                </button>
                            </form>
                            <div id="notice-alert" class="mt-3"></div>
                        </div>
                    </div>
                `;
            } 
            else if (feature === 'review-feedback') {
                content.innerHTML = `
                    <div class="card shadow-sm">
                        <div class="card-header bg-coffee">
                            <h3 class="card-title mb-0"><i class="bi bi-chat-dots me-2"></i>Review Student Feedback</h3>
                        </div>
                        <div class="card-body">
                            <p class="card-text text-muted mb-4">Read and respond to feedback submitted by students</p>
                            
                            <div id="feedback-display" class="mt-4">
                                <div class="d-flex justify-content-center">
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
                getFeedback();
            } 
            else if (feature === 'update-mess-timings') {
                content.innerHTML = `
                    <div class="card shadow-sm">
                        <div class="card-header bg-coffee">
                            <h3 class="card-title mb-0"><i class="bi bi-clock me-2"></i>Update Mess Timings</h3>
                        </div>
                        <div class="card-body">
                            <p class="card-text text-muted mb-4">Manage the meal timings for each day of the week</p>
                            
                            <div class="mb-4">
                                <label for="daySelector" class="form-label">Choose a Day:</label>
                                <select id="daySelector" class="form-select" onchange="showTimingsForm(this.value)">
                                    <option value="" disabled selected>Select a day...</option>
                                    <option value="Monday">Monday</option>
                                    <option value="Tuesday">Tuesday</option>
                                    <option value="Wednesday">Wednesday</option>
                                    <option value="Thursday">Thursday</option>
                                    <option value="Friday">Friday</option>
                                    <option value="Saturday">Saturday</option>
                                    <option value="Sunday">Sunday</option>
                                </select>
                            </div>
                            
                            <div id="timings-form"></div>
                        </div>
                    </div>
                `;
            }
            else if (feature === 'update-mess-menu') {
                content.innerHTML = `
                    <div class="card shadow-sm">
                        <div class="card-header bg-coffee">
                            <h3 class="card-title mb-0"><i class="bi bi-card-list me-2"></i>Update Mess Menu</h3>
                        </div>
                        <div class="card-body">
                            <p class="card-text text-muted mb-4">Manage the meal menu for each day of the week</p>
                            
                            <div class="mb-4">
                                <label for="daySelectorMenu" class="form-label">Choose a Day:</label>
                                <select id="daySelectorMenu" class="form-select" onchange="showMenuForm(this.value)">
                                    <option value="" disabled selected>Select a day...</option>
                                    <option value="Monday">Monday</option>
                                    <option value="Tuesday">Tuesday</option>
                                    <option value="Wednesday">Wednesday</option>
                                    <option value="Thursday">Thursday</option>
                                    <option value="Friday">Friday</option>
                                    <option value="Saturday">Saturday</option>
                                    <option value="Sunday">Sunday</option>
                                </select>
                            </div>
                            
                            <div id="menu-form"></div>
                        </div>
                    </div>
                `;
            }
            else if (feature === 'review-rebates') {
                content.innerHTML = `
                    <div class="card shadow-sm">
                        <div class="card-header bg-coffee">
                            <h3 class="card-title mb-0"><i class="bi bi-check-square me-2"></i>Review Rebate Applications</h3>
                        </div>
                        <div class="card-body">
                            <p class="card-text text-muted mb-4">Manage rebate applications submitted by students</p>
                            
                            <div class="mb-4">
                                <label for="statusSelector" class="form-label">Filter by Status:</label>
                                <select id="statusSelector" class="form-select" onchange="fetchRebates(this.value)">
                                    <option value="pending" selected>Pending</option>
                                    <option value="approved">Approved</option>
                                    <option value="rejected">Rejected</option>
                                </select>
                            </div>
                            
                            <div id="rebates-display" class="mt-4">
                                <div class="d-flex justify-content-center">
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
                fetchRebates('pending');
            }
            else if (feature === 'view-employees') {
                content.innerHTML = `
                    <div class="card shadow-sm">
                        <div class="card-header bg-coffee">
                            <h3 class="card-title mb-0"><i class="bi bi-people-fill me-2"></i>Manage Employee Info</h3>
                        </div>
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-center mb-4">
                                <p class="card-text text-muted mb-0">View and manage mess employee information</p>
                                <button class="btn btn-success" onclick="showAddEmployeeForm()">
                                    <i class="bi bi-plus-circle me-2"></i>Add New Employee
                                </button>
                            </div>
                            
                            <div id="employee-table" class="mt-4">
                                <div class="d-flex justify-content-center">
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
                fetchEmployees();
            }
            else if (feature === 'add-food-items') {
                content.innerHTML = `
                    <div class="card shadow-sm">
                        <div class="card-header bg-coffee">
                            <h3 class="card-title mb-0"><i class="bi bi-basket me-2"></i>Manage Food Items</h3>
                        </div>
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-center mb-4">
                                <p class="card-text text-muted mb-0">View and manage food items available in the mess</p>
                                <button class="btn btn-success" onclick="showAddFoodItemForm()">
                                    <i class="bi bi-plus-circle me-2"></i>Add Food Item
                                </button>
                            </div>
                            
                            <div id="food-items-table" class="mt-4">
                                <div class="d-flex justify-content-center">
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
                fetchFoodItems();
            }
            else if (feature === 'manage-inventory') {
                content.innerHTML = `
                    <div class="card shadow-sm">
                        <div class="card-header bg-coffee">
                            <h3 class="card-title mb-0"><i class="bi bi-box-seam me-2"></i>Manage Inventory</h3>
                        </div>
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-center mb-4">
                                <p class="card-text text-muted mb-0">Track and manage mess inventory items</p>
                                <button class="btn btn-success" onclick="showAddInventoryPage()">
                                    <i class="bi bi-plus-circle me-2"></i>Add Inventory Item
                                </button>
                            </div>
                            
                            <div id="inventory-table" class="mt-4">
                                <div class="d-flex justify-content-center">
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
                fetchInventory();
            }
            else if (feature === 'track-expenses') {
                content.innerHTML = `
                    <div class="card shadow-sm">
                        <div class="card-header bg-coffee">
                            <h3 class="card-title mb-0"><i class="bi bi-graph-up me-2"></i>Manage Expenses</h3>
                        </div>
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-center mb-4">
                                <p class="card-text text-muted mb-0">Track and manage mess expenses</p>
                                <button class="btn btn-success" onclick="showAddExpenseForm()">
                                    <i class="bi bi-plus-circle me-2"></i>Add Expense
                                </button>
                            </div>
                            
                            <div class="row mb-4">
                                <div class="col-md-5">
                                    <label for="expenseMonth" class="form-label">Month:</label>
                                    <select id="expenseMonth" class="form-select">
                                        ${[...Array(12)].map((_, index) => `
                                            <option value="${index + 1}" ${index + 1 === new Date().getMonth() + 1 ? 'selected' : ''}>
                                                ${new Date(0, index).toLocaleString('default', { month: 'long' })}
                                            </option>
                                        `).join('')}
                                    </select>
                                </div>
                                <div class="col-md-5">
                                    <label for="expenseYear" class="form-label">Year:</label>
                                    <select id="expenseYear" class="form-select">
                                        ${[...Array(5)].map((_, index) => `
                                            <option value="${new Date().getFullYear() - index}" ${index === 0 ? 'selected' : ''}>
                                                ${new Date().getFullYear() - index}
                                            </option>
                                        `).join('')}
                                    </select>
                                </div>
                                <div class="col-md-2 d-flex align-items-end">
                                    <button class="btn btn-primary w-100" onclick="fetchExpenses()">
                                        <i class="bi bi-search me-2"></i>View
                                    </button>
                                </div>
                            </div>
                            
                            <div id="expenses-table" class="mt-4">
                                <div class="text-center text-muted">
                                    <i class="bi bi-arrow-up-circle" style="font-size: 2rem;"></i>
                                    <p class="mt-2">Click "View" to see expenses for the selected month and year</p>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            }
            else {
                content.innerHTML = `
                    <div class="d-flex align-items-center justify-content-center" style="height: 80vh;">
                        <div class="text-center">
                            <i class="bi bi-arrow-left-circle" style="font-size: 3rem; color: var(--primary);"></i>
                            <h3 class="mt-3">Welcome to your dashboard!</h3>
                            <p class="text-muted">Select an option from the sidebar to get started.</p>
                        </div>
                    </div>
                `;
            }
        }

        function submitNotice(event) {
            event.preventDefault();

            const title = document.getElementById('noticeTitle').value.trim();
            const content = document.getElementById('noticeContent').value.trim();
            const alertDiv = document.getElementById('notice-alert');
            
            // Show loading state
            const submitButton = event.target.querySelector('button[type="submit"]');
            const originalButtonText = submitButton.innerHTML;
            submitButton.disabled = true;
            submitButton.innerHTML = `
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                Posting...
            `;

            // Validate input
            if (!title || !content) {
                alertDiv.innerHTML = `
                    <div class="alert alert-danger">
                        <i class="bi bi-exclamation-triangle-fill me-2"></i>
                        Please fill out all fields before posting the notice.
                    </div>
                `;
                submitButton.disabled = false;
                submitButton.innerHTML = originalButtonText;
                return;
            }

            // Send data to the backend
            fetch('/committee/notice', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    Authorization: `Bearer ${localStorage.getItem('token')}`
                },
                body: JSON.stringify({ title, content })
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to post the notice.');
                    }
                    return response.json();
                })
                .then(data => {
                    alertDiv.innerHTML = `
                        <div class="alert alert-success">
                            <i class="bi bi-check-circle-fill me-2"></i>
                            ${data.message}
                        </div>
                    `;
                    document.getElementById('noticeForm').reset();
                })
                .catch(error => {
                    console.error('Error posting notice:', error);
                    alertDiv.innerHTML = `
                        <div class="alert alert-danger">
                            <i class="bi bi-exclamation-triangle-fill me-2"></i>
                            An error occurred while posting the notice.
                        </div>
                    `;
                })
                .finally(() => {
                    // Restore button state
                    submitButton.disabled = false;
                    submitButton.innerHTML = originalButtonText;
                });
        }

        function getFeedback() {
            const display = document.getElementById('feedback-display');

            // Fetch feedback data from the backend
            fetch('/committee/feedback', {
                method: 'GET',
                headers: {
                    Authorization: `Bearer ${localStorage.getItem('token')}`
                }
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to fetch feedback data.');
                    }
                    return response.json();
                })
                .then(data => {
                    const feedback = data.feedback;

                    if (feedback.length === 0) {
                        display.innerHTML = `
                            <div class="text-center text-muted">
                                <i class="bi bi-chat-square-text" style="font-size: 2rem;"></i>
                                <p class="mt-2">No feedback has been submitted yet.</p>
                            </div>
                        `;
                        return;
                    }

                    // Generate cards for each feedback item
                    display.innerHTML = feedback
                        .map((item, index) => `
                            <div class="card mb-4 shadow-sm fade-in" style="animation-delay: ${index * 0.1}s;">
                                <div class="card-header bg-coffee">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <h5 class="card-title mb-0">
                                            <i class="bi bi-person-circle me-2"></i>${item.student_name}
                                        </h5>
                                        <span class="badge bg-coffee">
                                            ${new Date(item.date).toLocaleDateString()}
                                        </span>
                                    </div>
                                </div>
                                <div class="card-body">
                                    <p class="card-text">${item.message}</p>
                                    <div class="d-flex align-items-center mt-3 text-muted">
                                        <i class="bi bi-envelope me-2"></i>
                                        <small>${item.student_email}</small>
                                    </div>
                                </div>
                            </div>
                        `)
                        .join('');
                })
                .catch(error => {
                    console.error('Error fetching feedback:', error);
                    display.innerHTML = `
                        <div class="alert alert-danger">
                            <i class="bi bi-exclamation-triangle-fill me-2"></i>
                            An error occurred while loading feedback.
                        </div>
                    `;
                });
        }

        function showTimingsForm(selectedDay) {
            const formContainer = document.getElementById('timings-form');
            
            if (!selectedDay) return;
            
            formContainer.innerHTML = `
                <div class="d-flex justify-content-center mt-4">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            `;

            // Fetch existing timings for the selected day
            fetch(`/committee/get-timings?day=${selectedDay}`, {
                method: 'GET',
                headers: {
                    Authorization: `Bearer ${localStorage.getItem('token')}`
                }
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to fetch timings for the selected day.');
                    }
                    return response.json();
                })
                .then(data => {
                    const timings = data.timings;

                    // Populate the form with fetched timings
                    formContainer.innerHTML = `
                        <div class="card mt-4 shadow-sm">
                            <div class="card-header bg-coffee">
                                <h5 class="mb-0">
                                    <i class="bi bi-clock me-2"></i>Updating Timings for ${selectedDay}
                                </h5>
                            </div>
                            <div class="card-body">
                                <form id="timingsForm" class="form" onsubmit="submitMessTimings(event)">
                                    <input type="hidden" id="selectedDay" value="${selectedDay}">
                                    
                                    <div class="row mb-3">
                                        <div class="col-md-4">
                                            <div class="card h-100 shadow-sm">
                                                <div class="card-body">
                                                    <h5 class="card-title text-center">
                                                        <i class="bi bi-sunrise text-primary"></i> Breakfast
                                                    </h5>
                                                    <div class="row mt-3">
                                                        <div class="col-md-6 mb-3">
                                                            <label for="breakfastFrom" class="form-label">From:</label>
                                                            <input type="time" id="breakfastFrom" class="form-control" value="${timings.breakfast_from}" required>
                                                        </div>
                                                        <div class="col-md-6 mb-3">
                                                            <label for="breakfastTo" class="form-label">To:</label>
                                                            <input type="time" id="breakfastTo" class="form-control" value="${timings.breakfast_to}" required>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        
                                        <div class="col-md-4">
                                            <div class="card h-100 shadow-sm">
                                                <div class="card-body">
                                                    <h5 class="card-title text-center">
                                                        <i class="bi bi-brightness-high text-warning"></i> Lunch
                                                    </h5>
                                                    <div class="row mt-3">
                                                        <div class="col-md-6 mb-3">
                                                            <label for="lunchFrom" class="form-label">From:</label>
                                                            <input type="time" id="lunchFrom" class="form-control" value="${timings.lunch_from}" required>
                                                        </div>
                                                        <div class="col-md-6 mb-3">
                                                            <label for="lunchTo" class="form-label">To:</label>
                                                            <input type="time" id="lunchTo" class="form-control" value="${timings.lunch_to}" required>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        
                                        <div class="col-md-4">
                                            <div class="card h-100 shadow-sm">
                                                <div class="card-body">
                                                    <h5 class="card-title text-center">
                                                        <i class="bi bi-moon-stars text-secondary"></i> Dinner
                                                    </h5>
                                                    <div class="row mt-3">
                                                        <div class="col-md-6 mb-3">
                                                            <label for="dinnerFrom" class="form-label">From:</label>
                                                            <input type="time" id="dinnerFrom" class="form-control" value="${timings.dinner_from}" required>
                                                        </div>
                                                        <div class="col-md-6 mb-3">
                                                            <label for="dinnerTo" class="form-label">To:</label>
                                                            <input type="time" id="dinnerTo" class="form-control" value="${timings.dinner_to}" required>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    
                                    <div class="d-grid gap-2 mt-4">
                                        <button type="submit" class="btn btn-primary">
                                            <i class="bi bi-save me-2"></i>Update Timings
                                        </button>
                                    </div>
                                </form>
                                <div id="timings-alert" class="mt-3"></div>
                            </div>
                        </div>
                    `;
                })
                .catch(error => {
                    console.error('Error fetching timings:', error);
                    formContainer.innerHTML = `
                        <div class="alert alert-danger mt-4">
                            <i class="bi bi-exclamation-triangle-fill me-2"></i>
                            An error occurred while fetching timings for ${selectedDay}.
                        </div>
                    `;
                });
        }

        function submitMessTimings(event) {
            event.preventDefault();

            const day = document.getElementById('selectedDay').value;
            const breakfastFrom = document.getElementById('breakfastFrom').value;
            const breakfastTo = document.getElementById('breakfastTo').value;
            const lunchFrom = document.getElementById('lunchFrom').value;
            const lunchTo = document.getElementById('lunchTo').value;
            const dinnerFrom = document.getElementById('dinnerFrom').value;
            const dinnerTo = document.getElementById('dinnerTo').value;
            const alertDiv = document.getElementById('timings-alert');
            
            // Show loading state
            const submitButton = event.target.querySelector('button[type="submit"]');
            const originalButtonText = submitButton.innerHTML;
            submitButton.disabled = true;
            submitButton.innerHTML = `
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                Updating...
            `;

            fetch('/committee/update-timings', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    Authorization: `Bearer ${localStorage.getItem('token')}`
                },
                body: JSON.stringify({ day, breakfastFrom, breakfastTo, lunchFrom, lunchTo, dinnerFrom, dinnerTo })
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to update mess timings.');
                    }
                    return response.json();
                })
                .then(data => {
                    alertDiv.innerHTML = `
                        <div class="alert alert-success">
                            <i class="bi bi-check-circle-fill me-2"></i>
                            ${data.message}
                        </div>
                    `;
                    
                    // Refetch and update the form with new timings
                    fetch(`/committee/get-timings?day=${day}`, {
                        method: 'GET',
                        headers: {
                            Authorization: `Bearer ${localStorage.getItem('token')}`
                        }
                    })
                        .then(response => {
                            if (!response.ok) {
                                throw new Error('Failed to fetch updated timings.');
                            }
                            return response.json();
                        })
                        .then(data => {
                            const timings = data.timings;

                            document.getElementById('breakfastFrom').value = timings.breakfast_from;
                            document.getElementById('breakfastTo').value = timings.breakfast_to;
                            document.getElementById('lunchFrom').value = timings.lunch_from;
                            document.getElementById('lunchTo').value = timings.lunch_to;
                            document.getElementById('dinnerFrom').value = timings.dinner_from;
                            document.getElementById('dinnerTo').value = timings.dinner_to;
                        })
                        .catch(error => {
                            console.error('Error fetching updated timings:', error);
                        });
                })
                .catch(error => {
                    console.error('Error:', error);
                    alertDiv.innerHTML = `
                        <div class="alert alert-danger">
                            <i class="bi bi-exclamation-triangle-fill me-2"></i>
                            An error occurred while updating mess timings.
                        </div>
                    `;
                })
                .finally(() => {
                    // Restore button state
                    submitButton.disabled = false;
                    submitButton.innerHTML = originalButtonText;
                });
        }

        function showMenuForm(selectedDay) {
            const formContainer = document.getElementById('menu-form');
            
            if (!selectedDay) return;
            
            formContainer.innerHTML = `
                <div class="d-flex justify-content-center mt-4">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            `;

            fetch(`/committee/get-menu?day_of_week=${selectedDay}`, {
                method: 'GET',
                headers: {
                    Authorization: `Bearer ${localStorage.getItem('token')}`
                }
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to fetch menu for the selected day.');
                    }
                    return response.json();
                })
                .then(data => {
                    const menu = data.menu.reduce((acc, item) => {
                        acc[item.meal_type] = item.items_list;
                        return acc;
                    }, {});

                    formContainer.innerHTML = `
                        <div class="card mt-4 shadow-sm">
                            <div class="card-header bg-coffee">
                                <h5 class="mb-0">
                                    <i class="bi bi-card-list me-2"></i>Updating Menu for ${selectedDay}
                                </h5>
                            </div>
                            <div class="card-body">
                                <form id="menuForm" class="form" onsubmit="submitMenuForm(event, '${selectedDay}')">
                                    <div class="row">
                                        <div class="col-md-4 mb-3">
                                            <div class="card h-100 shadow-sm">
                                                <div class="card-body">
                                                    <h5 class="card-title text-center">
                                                        <i class="bi bi-sunrise text-primary"></i> Breakfast
                                                    </h5>
                                                    <div class="mt-3">
                                                        <label for="breakfastMenu" class="form-label">Menu Items:</label>
                                                        <textarea id="breakfastMenu" class="form-control" rows="6" placeholder="Enter comma-separated items" required>${menu.breakfast || ''}</textarea>
                                                        <small class="form-text text-muted">Separate items with commas</small>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        
                                        <div class="col-md-4 mb-3">
                                            <div class="card h-100 shadow-sm">
                                                <div class="card-body">
                                                    <h5 class="card-title text-center">
                                                        <i class="bi bi-brightness-high text-warning"></i> Lunch
                                                    </h5>
                                                    <div class="mt-3">
                                                        <label for="lunchMenu" class="form-label">Menu Items:</label>
                                                        <textarea id="lunchMenu" class="form-control" rows="6" placeholder="Enter comma-separated items" required>${menu.lunch || ''}</textarea>
                                                        <small class="form-text text-muted">Separate items with commas</small>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        
                                        <div class="col-md-4 mb-3">
                                            <div class="card h-100 shadow-sm">
                                                <div class="card-body">
                                                    <h5 class="card-title text-center">
                                                        <i class="bi bi-moon-stars text-secondary"></i> Dinner
                                                    </h5>
                                                    <div class="mt-3">
                                                        <label for="dinnerMenu" class="form-label">Menu Items:</label>
                                                        <textarea id="dinnerMenu" class="form-control" rows="6" placeholder="Enter comma-separated items" required>${menu.dinner || ''}</textarea>
                                                        <small class="form-text text-muted">Separate items with commas</small>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    
                                    <div class="d-grid gap-2 mt-4">
                                        <button type="submit" class="btn btn-primary">
                                            <i class="bi bi-save me-2"></i>Update Menu
                                        </button>
                                    </div>
                                </form>
                                <div id="menu-alert" class="mt-3"></div>
                            </div>
                        </div>
                    `;
                })
                .catch(error => {
                    console.error('Error fetching menu:', error);
                    formContainer.innerHTML = `
                        <div class="alert alert-danger mt-4">
                            <i class="bi bi-exclamation-triangle-fill me-2"></i>
                            An error occurred while fetching the menu for ${selectedDay}.
                        </div>
                    `;
                });
        }

        function submitMenuForm(event, selectedDay) {
            event.preventDefault();

            const breakfastMenu = document.getElementById('breakfastMenu').value;
            const lunchMenu = document.getElementById('lunchMenu').value;
            const dinnerMenu = document.getElementById('dinnerMenu').value;
            const alertDiv = document.getElementById('menu-alert');
            
            // Show loading state
            const submitButton = event.target.querySelector('button[type="submit"]');
            const originalButtonText = submitButton.innerHTML;
            submitButton.disabled = true;
            submitButton.innerHTML = `
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                Updating...
            `;

            // Create an array of promises for each meal type update
            const updatePromises = [
                // Update breakfast menu
                fetch('/committee/menu', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        Authorization: `Bearer ${localStorage.getItem('token')}`
                    },
                    body: JSON.stringify({ day_of_week: selectedDay, mealType: 'breakfast', itemsList: breakfastMenu })
                }),
                
                // Update lunch menu
                fetch('/committee/menu', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        Authorization: `Bearer ${localStorage.getItem('token')}`
                    },
                    body: JSON.stringify({ day_of_week: selectedDay, mealType: 'lunch', itemsList: lunchMenu })
                }),
                
                // Update dinner menu
                fetch('/committee/menu', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        Authorization: `Bearer ${localStorage.getItem('token')}`
                    },
                    body: JSON.stringify({ day_of_week: selectedDay, mealType: 'dinner', itemsList: dinnerMenu })
                })
            ];

            // Wait for all updates to complete
            Promise.all(updatePromises)
                .then(() => {
                    alertDiv.innerHTML = `
                        <div class="alert alert-success">
                            <i class="bi bi-check-circle-fill me-2"></i>
                            Menu updated successfully for ${selectedDay}.
                        </div>
                    `;
                })
                .catch(error => {
                    console.error('Error updating menu:', error);
                    alertDiv.innerHTML = `
                        <div class="alert alert-danger">
                            <i class="bi bi-exclamation-triangle-fill me-2"></i>
                            An error occurred while updating the menu for ${selectedDay}.
                        </div>
                    `;
                })
                .finally(() => {
                    // Restore button state
                    submitButton.disabled = false;
                    submitButton.innerHTML = originalButtonText;
                });
        }

        function fetchRebates(status) {
            const display = document.getElementById('rebates-display');
            
            display.innerHTML = `
                <div class="d-flex justify-content-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            `;

            fetch(`/committee/rebates?status=${status}`, {
                method: 'GET',
                headers: {
                    Authorization: `Bearer ${localStorage.getItem('token')}`
                }
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to fetch rebate applications.');
                    }
                    return response.json();
                })
                .then(data => {
                    const rebates = data.rebates;

                    if (rebates.length === 0) {
                        display.innerHTML = `
                            <div class="text-center text-muted">
                                <i class="bi bi-info-circle" style="font-size: 2rem;"></i>
                                <p class="mt-2">No ${status} rebate applications found.</p>
                            </div>
                        `;
                        return;
                    }

                    // Generate rebate application cards
                    display.innerHTML = `
                        <div class="row g-4">
                            ${rebates.map((rebate, index) => `
                                <div class="col-md-6">
                                    <div class="card shadow-sm fade-in" style="animation-delay: ${index * 0.1}s;">
                                        <div class="card-header bg-${getStatusColor(rebate.status)}">
                                            <div class="d-flex justify-content-between align-items-center">
                                                <h5 class="mb-0 text-white">
                                                    <i class="${getStatusIcon(rebate.status)} me-2"></i>
                                                    ${capitalize(rebate.status)}
                                                </h5>
                                                <span class="badge bg-white text-${getStatusColor(rebate.status)}">
                                                    ${new Date(rebate.created_at).toLocaleDateString()}
                                                </span>
                                            </div>
                                        </div>
                                        <div class="card-body">
                                            <h6 class="card-subtitle mb-3 text-primary">
                                                <i class="bi bi-person-circle me-2"></i>
                                                ${rebate.student_name}
                                            </h6>
                                            <div class="row mb-3">
                                                <div class="col-md-4">
                                                    <p class="mb-1 text-muted">Start Date:</p>
                                                    <p class="fw-bold">${new Date(rebate.start_date).toLocaleDateString()}</p>
                                                </div>
                                                <div class="col-md-4">
                                                    <p class="mb-1 text-muted">End Date:</p>
                                                    <p class="fw-bold">${new Date(rebate.end_date).toLocaleDateString()}</p>
                                                </div>
                                                <div class="col-md-4">
                                                    <p class="mb-1 text-muted">Duration:</p>
                                                    <p class="fw-bold">${rebate.duration} days</p>
                                                </div>
                                            </div>
                                            <p class="card-text text-muted">
                                                <i class="bi bi-envelope me-2"></i>
                                                ${rebate.student_email}
                                            </p>
                                            ${status === 'pending' ? `
                                                <div class="d-flex gap-2 mt-3">
                                                    <button class="btn btn-success" onclick="updateRebateStatus(${rebate.id}, 'approved')">
                                                        <i class="bi bi-check-circle me-2"></i>Approve
                                                    </button>
                                                    <button class="btn btn-danger" onclick="updateRebateStatus(${rebate.id}, 'rejected')">
                                                        <i class="bi bi-x-circle me-2"></i>Reject
                                                    </button>
                                                </div>
                                            ` : ''}
                                        </div>
                                    </div>
                                </div>
                            `).join('')}
                        </div>
                    `;
                })
                .catch(error => {
                    console.error('Error fetching rebate applications:', error);
                    display.innerHTML = `
                        <div class="alert alert-danger">
                            <i class="bi bi-exclamation-triangle-fill me-2"></i>
                            An error occurred while loading rebates.
                        </div>
                    `;
                });
        }

        function getStatusIcon(status) {
            switch (status) {
                case "pending":
                    return "bi bi-hourglass-split";
                case "approved":
                    return "bi bi-check-circle-fill";
                case "rejected":
                    return "bi bi-x-circle-fill";
                default:
                    return "bi bi-question-circle-fill";
            }
        }

        function getStatusColor(status) {
            switch (status) {
                case "pending":
                    return "warning";
                case "approved":
                    return "success";
                case "rejected":
                    return "danger";
                default:
                    return "secondary";
            }
        }

        function updateRebateStatus(rebateId, status) {
            if (!confirm(`Are you sure you want to ${status} this rebate application?`)) return;
            
            const statusDisplay = document.getElementById('rebates-display');
            const loadingHtml = `
                <div class="d-flex justify-content-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            `;
            statusDisplay.innerHTML = loadingHtml;

            fetch(`/committee/rebates/${rebateId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    Authorization: `Bearer ${localStorage.getItem('token')}`
                },
                body: JSON.stringify({ status })
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to update rebate status.');
                    }
                    return response.json();
                })
                .then(data => {
                    alert(data.message);
                    fetchRebates('pending'); // Refresh the pending list
                })
                .catch(error => {
                    console.error('Error updating rebate status:', error);
                    alert('An error occurred while updating the rebate status.');
                    fetchRebates('pending'); // Refresh the list anyway
                });
        }

        function showAddEmployeeForm() {
            const tableContainer = document.getElementById('employee-table');
            tableContainer.innerHTML = `
                <div class="card shadow-sm">
                    <div class="card-header bg-coffee">
                        <h5 class="mb-0">
                            <i class="bi bi-person-plus me-2"></i>Add New Employee
                        </h5>
                    </div>
                    <div class="card-body">
                        <form id="addEmployeeForm" class="form" onsubmit="addEmployee(event)">
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label for="employeeName" class="form-label">Name:</label>
                                    <input type="text" id="employeeName" class="form-control" placeholder="Enter employee name" required>
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label for="employeeRole" class="form-label">Role:</label>
                                    <input type="text" id="employeeRole" class="form-control" placeholder="Enter role (e.g., cook, manager)" required>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label for="employeePhone" class="form-label">Phone Number:</label>
                                    <input type="text" id="employeePhone" class="form-control" placeholder="Enter phone number" required>
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label for="employeeSalary" class="form-label">Salary:</label>
                                    <input type="number" id="employeeSalary" class="form-control" placeholder="Enter salary" required>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label for="employeeAddress" class="form-label">Address:</label>
                                    <textarea id="employeeAddress" class="form-control" placeholder="Enter address" rows="3"></textarea>
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label for="employeeJoiningDate" class="form-label">Joining Date:</label>
                                    <input type="date" id="employeeJoiningDate" class="form-control" required>
                                </div>
                            </div>
                            <div class="d-flex gap-2 mt-4">
                                <button type="submit" class="btn btn-primary">
                                    <i class="bi bi-plus-circle me-2"></i>Add Employee
                                </button>
                                <button type="button" class="btn btn-secondary" onclick="fetchEmployees()">
                                    <i class="bi bi-x-circle me-2"></i>Cancel
                                </button>
                            </div>
                        </form>
                        <div id="add-employee-alert" class="mt-3"></div>
                    </div>
                </div>
            `;
        }

        function addEmployee(event) {
            event.preventDefault();

            const name = document.getElementById('employeeName').value;
            const role = document.getElementById('employeeRole').value;
            const phone_no = document.getElementById('employeePhone').value;
            const salary = document.getElementById('employeeSalary').value;
            const address = document.getElementById('employeeAddress').value;
            const joining_date = document.getElementById('employeeJoiningDate').value;
            const alertDiv = document.getElementById('add-employee-alert');
            
            // Show loading state
            const submitButton = event.target.querySelector('button[type="submit"]');
            const originalButtonText = submitButton.innerHTML;
            submitButton.disabled = true;
            submitButton.innerHTML = `
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                Adding...
            `;

            fetch('/committee/employees', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    Authorization: `Bearer ${localStorage.getItem('token')}`
                },
                body: JSON.stringify({ name, role, phone_no, salary, address, joining_date })
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to add employee.');
                    }
                    return response.json();
                })
                .then(data => {
                    alertDiv.innerHTML = `
                        <div class="alert alert-success">
                            <i class="bi bi-check-circle-fill me-2"></i>
                            ${data.message}
                        </div>
                    `;
                    setTimeout(fetchEmployees, 2000); // Reload employees after 2 seconds
                })
                .catch(error => {
                    console.error('Error adding employee:', error);
                    alertDiv.innerHTML = `
                        <div class="alert alert-danger">
                            <i class="bi bi-exclamation-triangle-fill me-2"></i>
                            An error occurred while adding the employee.
                        </div>
                    `;
                })
                .finally(() => {
                    // Restore button state
                    submitButton.disabled = false;
                    submitButton.innerHTML = originalButtonText;
                });
        }

        function fetchEmployees() {
            const tableContainer = document.getElementById('employee-table');
            tableContainer.innerHTML = `
                <div class="d-flex justify-content-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            `;

            fetch('/committee/employees', {
                method: 'GET',
                headers: {
                    Authorization: `Bearer ${localStorage.getItem('token')}`
                }
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to fetch employee data.');
                    }
                    return response.json();
                })
                .then(data => {
                    const employees = data.employees;

                    if (employees.length === 0) {
                        tableContainer.innerHTML = `
                            <div class="text-center text-muted">
                                <i class="bi bi-people" style="font-size: 2rem;"></i>
                                <p class="mt-2">No employees found.</p>
                            </div>
                        `;
                        return;
                    }

                    // Group employees by role
                    const roles = {};
                    employees.forEach(employee => {
                        if (!roles[employee.role]) {
                            roles[employee.role] = [];
                        }
                        roles[employee.role].push(employee);
                    });

                    // Generate tables for each role
                    tableContainer.innerHTML = Object.keys(roles)
                        .map(role => `
                            <div class="card shadow-sm mb-4 fade-in">
                                <div class="card-header bg-coffee">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <h5 class="mb-0 text-white">
                                            <i class="bi bi-people-fill me-2"></i>${role} Staff
                                        </h5>
                                        <span class="badge bg-white text-primary">
                                            ${roles[role].length}
                                        </span>
                                    </div>
                                </div>
                                <div class="card-body p-0">
                                    <div class="table-responsive">
                                        <table class="table table-hover mb-0">
                                            <thead>
                                                <tr>
                                                    <th>Name</th>
                                                    <th>Phone</th>
                                                    <th>Salary</th>
                                                    <th>Address</th>
                                                    <th>Actions</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                ${roles[role].map(employee => `
                                                    <tr>
                                                        <td>${employee.name}</td>
                                                        <td>${employee.phone_no}</td>
                                                        <td>₹${employee.salary}</td>
                                                        <td>${employee.address || 'N/A'}</td>
                                                        <td>
                                                            <div class="d-flex gap-2">
                                                                <button class="btn btn-sm btn-primary" onclick="showEmployeeUpdateForm(${employee.id}, '${employee.name}', '${employee.role}', '${employee.phone_no}', ${employee.salary}, '${employee.address || ''}')">
                                                                    <i class="bi bi-pencil"></i>
                                                                </button>
                                                                <button class="btn btn-sm btn-danger" onclick="deleteEmployee(${employee.id}, '${employee.name}')">
                                                                    <i class="bi bi-trash"></i>
                                                                </button>
                                                            </div>
                                                        </td>
                                                    </tr>
                                                `).join('')}
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        `).join('');
                })
                .catch(error => {
                    console.error('Error fetching employees:', error);
                    tableContainer.innerHTML = `
                        <div class="alert alert-danger">
                            <i class="bi bi-exclamation-triangle-fill me-2"></i>
                            An error occurred while loading employees.
                        </div>
                    `;
                });
        }

        function showEmployeeUpdateForm(id, name, role, phone, salary, address) {
            const tableContainer = document.getElementById('employee-table');
            tableContainer.innerHTML = `
                <div class="card shadow-sm">
                    <div class="card-header bg-coffee">
                        <h5 class="mb-0">
                            <i class="bi bi-pencil me-2"></i>Update Employee: ${name}
                        </h5>
                    </div>
                    <div class="card-body">
                        <form id="updateEmployeeForm" class="form" onsubmit="updateEmployee(event, ${id})">
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label for="updateEmployeeName" class="form-label">Name:</label>
                                    <input type="text" id="updateEmployeeName" class="form-control" value="${name}" required>
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label for="updateEmployeeRole" class="form-label">Role:</label>
                                    <input type="text" id="updateEmployeeRole" class="form-control" value="${role}" required>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label for="updateEmployeePhone" class="form-label">Phone Number:</label>
                                    <input type="text" id="updateEmployeePhone" class="form-control" value="${phone}" required>
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label for="updateEmployeeSalary" class="form-label">Salary:</label>
                                    <input type="number" id="updateEmployeeSalary" class="form-control" value="${salary}" required>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-12 mb-3">
                                    <label for="updateEmployeeAddress" class="form-label">Address:</label>
                                    <textarea id="updateEmployeeAddress" class="form-control" rows="3">${address}</textarea>
                                </div>
                            </div>
                            <div class="d-flex gap-2 mt-4">
                                <button type="submit" class="btn btn-primary">
                                    <i class="bi bi-save me-2"></i>Update Employee
                                </button>
                                <button type="button" class="btn btn-secondary" onclick="fetchEmployees()">
                                    <i class="bi bi-x-circle me-2"></i>Cancel
                                </button>
                            </div>
                        </form>
                        <div id="update-employee-alert" class="mt-3"></div>
                    </div>
                </div>
            `;
        }

        function updateEmployee(event, id) {
            event.preventDefault();

            const name = document.getElementById('updateEmployeeName').value;
            const role = document.getElementById('updateEmployeeRole').value;
            const phone_no = document.getElementById('updateEmployeePhone').value;
            const salary = document.getElementById('updateEmployeeSalary').value;
            const address = document.getElementById('updateEmployeeAddress').value;
            const alertDiv = document.getElementById('update-employee-alert');
            
            // Show loading state
            const submitButton = event.target.querySelector('button[type="submit"]');
            const originalButtonText = submitButton.innerHTML;
            submitButton.disabled = true;
            submitButton.innerHTML = `
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                Updating...
            `;

            fetch(`/committee/employees/${id}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    Authorization: `Bearer ${localStorage.getItem('token')}`
                },
                body: JSON.stringify({ name, role, phone_no, salary, address })
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to update employee.');
                    }
                    return response.json();
                })
                .then(data => {
                    alertDiv.innerHTML = `
                        <div class="alert alert-success">
                            <i class="bi bi-check-circle-fill me-2"></i>
                            ${data.message}
                        </div>
                    `;
                    setTimeout(fetchEmployees, 2000); // Reload employees after 2 seconds
                })
                .catch(error => {
                    console.error('Error updating employee:', error);
                    alertDiv.innerHTML = `
                        <div class="alert alert-danger">
                            <i class="bi bi-exclamation-triangle-fill me-2"></i>
                            An error occurred while updating the employee.
                        </div>
                    `;
                })
                .finally(() => {
                    // Restore button state
                    submitButton.disabled = false;
                    submitButton.innerHTML = originalButtonText;
                });
        }

        function deleteEmployee(id, name) {
            if (!confirm(`Are you sure you want to delete employee "${name}"?`)) return;

            fetch(`/committee/employees/${id}`, {
                method: 'DELETE',
                headers: {
                    Authorization: `Bearer ${localStorage.getItem('token')}`
                }
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to delete employee.');
                    }
                    return response.json();
                })
                .then(data => {
                    alert(data.message);
                    fetchEmployees(); // Refresh the employee list
                })
                .catch(error => {
                    console.error('Error deleting employee:', error);
                    alert('An error occurred while deleting the employee.');
                });
        }

        function fetchFoodItems() {
            const tableContainer = document.getElementById('food-items-table');
            tableContainer.innerHTML = `
                <div class="d-flex justify-content-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            `;

            fetch('/committee/food-items', {
                method: 'GET',
                headers: {
                    Authorization: `Bearer ${localStorage.getItem('token')}`
                }
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to fetch food items.');
                    }
                    return response.json();
                })
                .then(data => {
                    const items = data.items;

                    if (items.length === 0) {
                        tableContainer.innerHTML = `
                            <div class="text-center text-muted">
                                <i class="bi bi-basket" style="font-size: 2rem;"></i>
                                <p class="mt-2">No food items found. Add some items to get started.</p>
                            </div>
                        `;
                        return;
                    }

                    tableContainer.innerHTML = `
                        <div class="card shadow-sm">
                            <div class="card-header bg-coffee">
                                <h5 class="mb-0 text-white">
                                    <i class="bi bi-basket me-2"></i>Food Items
                                </h5>
                            </div>
                            <div class="card-body p-0">
                                <div class="table-responsive">
                                    <table class="table table-hover mb-0">
                                        <thead>
                                            <tr>
                                                <th>Name</th>
                                                <th>Unit Price</th>
                                                <th>Unit of Measure</th>
                                                <th>Added On</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            ${items.map(item => `
                                                <tr>
                                                    <td>${item.name}</td>
                                                    <td>₹${item.unit_price}</td>
                                                    <td>${item.unit_of_measure}</td>
                                                    <td>${new Date(item.created_at).toLocaleDateString()}</td>
                                                </tr>
                                            `).join('')}
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    `;
                })
                .catch(error => {
                    console.error('Error fetching food items:', error);
                    tableContainer.innerHTML = `
                        <div class="alert alert-danger">
                            <i class="bi bi-exclamation-triangle-fill me-2"></i>
                            An error occurred while loading food items.
                        </div>
                    `;
                });
        }

        function showAddFoodItemForm() {
            const tableContainer = document.getElementById('food-items-table');
            tableContainer.innerHTML = `
                <div class="card shadow-sm">
                    <div class="card-header bg-coffee">
                        <h5 class="mb-0">
                            <i class="bi bi-basket-fill me-2"></i>Add New Food Item
                        </h5>
                    </div>
                    <div class="card-body">
                        <form id="addFoodItemForm" class="form" onsubmit="addFoodItem(event)">
                            <div class="row">
                                <div class="col-md-4 mb-3">
                                    <label for="foodItemName" class="form-label">Name:</label>
                                    <input type="text" id="foodItemName" class="form-control" placeholder="Enter food item name" required>
                                </div>
                                <div class="col-md-4 mb-3">
                                    <label for="foodItemPrice" class="form-label">Unit Price (₹):</label>
                                    <input type="number" id="foodItemPrice" class="form-control" placeholder="Enter unit price" step="0.01" min="0" required>
                                </div>
                                <div class="col-md-4 mb-3">
                                    <label for="foodItemUnit" class="form-label">Unit of Measure:</label>
                                    <select id="foodItemUnit" class="form-select" required>
                                        <option value="" disabled selected>Select unit...</option>
                                        <option value="kg">Kilogram (kg)</option>
                                        <option value="g">Gram (g)</option>
                                        <option value="l">Liter (l)</option>
                                        <option value="ml">Milliliter (ml)</option>
                                        <option value="pcs">Pieces (pcs)</option>
                                        <option value="dozen">Dozen</option>
                                        <option value="packet">Packet</option>
                                    </select>
                                </div>
                            </div>
                            <div class="d-flex gap-2 mt-4">
                                <button type="submit" class="btn btn-primary">
                                    <i class="bi bi-plus-circle me-2"></i>Add Food Item
                                </button>
                                <button type="button" class="btn btn-secondary" onclick="fetchFoodItems()">
                                    <i class="bi bi-x-circle me-2"></i>Cancel
                                </button>
                            </div>
                        </form>
                        <div id="add-food-item-alert" class="mt-3"></div>
                    </div>
                </div>
            `;
        }

        function addFoodItem(event) {
            event.preventDefault();

            const name = document.getElementById('foodItemName').value;
            const unitPrice = document.getElementById('foodItemPrice').value;
            const unitOfMeasure = document.getElementById('foodItemUnit').value;
            const alertDiv = document.getElementById('add-food-item-alert');
            
            // Show loading state
            const submitButton = event.target.querySelector('button[type="submit"]');
            const originalButtonText = submitButton.innerHTML;
            submitButton.disabled = true;
            submitButton.innerHTML = `
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                Adding...
            `;

            fetch('/committee/food-items', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    Authorization: `Bearer ${localStorage.getItem('token')}`
                },
                body: JSON.stringify({ name, unitPrice, unitOfMeasure })
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to add food item.');
                    }
                    return response.json();
                })
                .then(data => {
                    alertDiv.innerHTML = `
                        <div class="alert alert-success">
                            <i class="bi bi-check-circle-fill me-2"></i>
                            ${data.message}
                        </div>
                    `;
                    setTimeout(fetchFoodItems, 2000); // Reload food items after 2 seconds
                })
                .catch(error => {
                    console.error('Error adding food item:', error);
                    alertDiv.innerHTML = `
                        <div class="alert alert-danger">
                            <i class="bi bi-exclamation-triangle-fill me-2"></i>
                            An error occurred while adding the food item.
                        </div>
                    `;
                })
                .finally(() => {
                    // Restore button state
                    submitButton.disabled = false;
                    submitButton.innerHTML = originalButtonText;
                });
        }

        function fetchInventory() {
            const tableContainer = document.getElementById('inventory-table');
            tableContainer.innerHTML = `
                <div class="d-flex justify-content-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            `;

            fetch('/committee/inventory', {
                method: 'GET',
                headers: {
                    Authorization: `Bearer ${localStorage.getItem('token')}`
                }
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to fetch inventory data.');
                    }
                    return response.json();
                })
                .then(data => {
                    const inventory = data.inventory;

                    if (inventory.length === 0) {
                        tableContainer.innerHTML = `
                            <div class="text-center text-muted">
                                <i class="bi bi-box-seam" style="font-size: 2rem;"></i>
                                <p class="mt-2">No inventory items found. Add some items to get started.</p>
                            </div>
                        `;
                        return;
                    }

                    tableContainer.innerHTML = `
                        <div class="card shadow-sm">
                            <div class="card-header bg-coffee">
                                <h5 class="mb-0 text-white">
                                    <i class="bi bi-box-seam me-2"></i>Inventory Items
                                </h5>
                            </div>
                            <div class="card-body p-0">
                                <div class="table-responsive">
                                    <table class="table table-hover mb-0">
                                        <thead>
                                            <tr>
                                                <th>Item</th>
                                                <th>Required</th>
                                                <th>Available</th>
                                                <th>Status</th>
                                                <th>Last Updated</th>
                                                <th>Actions</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            ${inventory.map(item => {
                                                const availablePercentage = (item.available_amount / item.required_amount) * 100;
                                                let statusClass = 'bg-success';
                                                let statusText = 'Good';
                                                
                                                if (availablePercentage < 20) {
                                                    statusClass = 'bg-danger';
                                                    statusText = 'Critical';
                                                } else if (availablePercentage < 50) {
                                                    statusClass = 'bg-warning';
                                                    statusText = 'Low';
                                                }
                                                
                                                return `
                                                    <tr>
                                                        <td>${item.name}</td>
                                                        <td>${item.required_amount} ${item.unit_of_measure}</td>
                                                        <td>${item.available_amount} ${item.unit_of_measure}</td>
                                                        <td><span class="badge ${statusClass}">${statusText}</span></td>
                                                        <td>${new Date(item.last_updated).toLocaleString()}</td>
                                                        <td>
                                                            <button class="btn btn-sm btn-primary" onclick="showUpdateInventoryForm(${item.id}, ${item.required_amount}, ${item.available_amount}, '${item.name}', '${item.unit_of_measure}')">
                                                                <i class="bi bi-pencil"></i> Update
                                                            </button>
                                                        </td>
                                                    </tr>
                                                `;
                                            }).join('')}
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    `;
                })
                .catch(error => {
                    console.error('Error fetching inventory:', error);
                    tableContainer.innerHTML = `
                        <div class="alert alert-danger">
                            <i class="bi bi-exclamation-triangle-fill me-2"></i>
                            An error occurred while loading inventory data.
                        </div>
                    `;
                });
        }

        function showAddInventoryPage() {
            const tableContainer = document.getElementById('inventory-table');
            tableContainer.innerHTML = `
                <div class="d-flex justify-content-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            `;

            // First, fetch all food items to populate the dropdown
            fetch('/committee/food-items', {
                method: 'GET',
                headers: {
                    Authorization: `Bearer ${localStorage.getItem('token')}`
                }
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to fetch food items.');
                    }
                    return response.json();
                })
                .then(data => {
                    const items = data.items;

                    if (items.length === 0) {
                        tableContainer.innerHTML = `
                            <div class="alert alert-warning">
                                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                                No food items found. Please add food items first before adding inventory.
                                <div class="mt-3">
                                    <button class="btn btn-primary" onclick="showFeature('add-food-items')">
                                        <i class="bi bi-plus-circle me-2"></i>Add Food Items
                                    </button>
                                </div>
                            </div>
                        `;
                        return;
                    }

                    tableContainer.innerHTML = `
                        <div class="card shadow-sm">
                            <div class="card-header bg-coffee">
                                <h5 class="mb-0">
                                    <i class="bi bi-box-seam-fill me-2"></i>Add New Inventory Item
                                </h5>
                            </div>
                            <div class="card-body">
                                <form id="addInventoryForm" class="form" onsubmit="addInventoryItem(event)">
                                    <div class="row">
                                        <div class="col-md-4 mb-3">
                                            <label for="foodItemSelect" class="form-label">Food Item:</label>
                                            <select id="foodItemSelect" class="form-select" required>
                                                <option value="" disabled selected>Select food item...</option>
                                                ${items.map(item => `
                                                    <option value="${item.id}" data-unit="${item.unit_of_measure}">
                                                        ${item.name} (${item.unit_of_measure})
                                                    </option>
                                                `).join('')}
                                            </select>
                                        </div>
                                        <div class="col-md-4 mb-3">
                                            <label for="requiredAmount" class="form-label">Required Amount:</label>
                                            <div class="input-group">
                                                <input type="number" id="requiredAmount" class="form-control" placeholder="Enter required amount" step="0.01" min="0" required>
                                                <span class="input-group-text" id="requiredUnit">-</span>
                                            </div>
                                        </div>
                                        <div class="col-md-4 mb-3">
                                            <label for="availableAmount" class="form-label">Available Amount:</label>
                                            <div class="input-group">
                                                <input type="number" id="availableAmount" class="form-control" placeholder="Enter available amount" step="0.01" min="0" required>
                                                <span class="input-group-text" id="availableUnit">-</span>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="d-flex gap-2 mt-4">
                                        <button type="submit" class="btn btn-primary">
                                            <i class="bi bi-plus-circle me-2"></i>Add Inventory Item
                                        </button>
                                        <button type="button" class="btn btn-secondary" onclick="fetchInventory()">
                                            <i class="bi bi-x-circle me-2"></i>Cancel
                                        </button>
                                    </div>
                                </form>
                                <div id="add-inventory-alert" class="mt-3"></div>
                            </div>
                        </div>
                    `;

                    // Update unit labels when food item is selected
                    document.getElementById('foodItemSelect').addEventListener('change', function() {
                        const selectedOption = this.options[this.selectedIndex];
                        const unit = selectedOption.getAttribute('data-unit');
                        document.getElementById('requiredUnit').textContent = unit;
                        document.getElementById('availableUnit').textContent = unit;
                    });
                })
                .catch(error => {
                    console.error('Error fetching food items:', error);
                    tableContainer.innerHTML = `
                        <div class="alert alert-danger">
                            <i class="bi bi-exclamation-triangle-fill me-2"></i>
                            An error occurred while loading food items.
                        </div>
                    `;
                });
        }

        function addInventoryItem(event) {
            event.preventDefault();

            const foodItemId = document.getElementById('foodItemSelect').value;
            const requiredAmount = document.getElementById('requiredAmount').value;
            const availableAmount = document.getElementById('availableAmount').value;
            const alertDiv = document.getElementById('add-inventory-alert');
            
            // Show loading state
            const submitButton = event.target.querySelector('button[type="submit"]');
            const originalButtonText = submitButton.innerHTML;
            submitButton.disabled = true;
            submitButton.innerHTML = `
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                Adding...
            `;

            fetch('/committee/inventory', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    Authorization: `Bearer ${localStorage.getItem('token')}`
                },
                body: JSON.stringify({ foodItemId, requiredAmount, availableAmount })
            })
                .then(response => {
                    if (!response.ok) {
                        return response.json().then(err => {
                            throw new Error(err.message || 'Failed to add inventory item.');
                        });
                    }
                    return response.json();
                })
                .then(data => {
                    alertDiv.innerHTML = `
                        <div class="alert alert-success">
                            <i class="bi bi-check-circle-fill me-2"></i>
                            ${data.message}
                        </div>
                    `;
                    setTimeout(fetchInventory, 2000); // Reload inventory after 2 seconds
                })
                .catch(error => {
                    console.error('Error adding inventory item:', error);
                    alertDiv.innerHTML = `
                        <div class="alert alert-danger">
                            <i class="bi bi-exclamation-triangle-fill me-2"></i>
                            ${error.message || 'An error occurred while adding the inventory item.'}
                        </div>
                    `;
                })
                .finally(() => {
                    // Restore button state
                    submitButton.disabled = false;
                    submitButton.innerHTML = originalButtonText;
                });
        }

        function showUpdateInventoryForm(inventoryId, requiredAmount, availableAmount, itemName, unitOfMeasure) {
            const tableContainer = document.getElementById('inventory-table');
            tableContainer.innerHTML = `
                <div class="card shadow-sm">
                    <div class="card-header bg-coffee">
                        <h5 class="mb-0">
                            <i class="bi bi-pencil me-2"></i>Update Inventory: ${itemName}
                        </h5>
                    </div>
                    <div class="card-body">
                        <form id="updateInventoryForm" class="form" onsubmit="updateInventory(event)">
                            <input type="hidden" id="inventoryId" value="${inventoryId}">
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label for="updateRequiredAmount" class="form-label">Required Amount:</label>
                                    <div class="input-group">
                                        <input type="number" id="updateRequiredAmount" class="form-control" value="${requiredAmount}" step="0.01" min="0" required>
                                        <span class="input-group-text">${unitOfMeasure}</span>
                                    </div>
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label for="updateAvailableAmount" class="form-label">Available Amount:</label>
                                    <div class="input-group">
                                        <input type="number" id="updateAvailableAmount" class="form-control" value="${availableAmount}" step="0.01" min="0" required>
                                        <span class="input-group-text">${unitOfMeasure}</span>
                                    </div>
                                </div>
                            </div>
                            <div class="d-flex gap-2 mt-4">
                                <button type="submit" class="btn btn-primary">
                                    <i class="bi bi-save me-2"></i>Update Inventory
                                </button>
                                <button type="button" class="btn btn-secondary" onclick="fetchInventory()">
                                    <i class="bi bi-x-circle me-2"></i>Cancel
                                </button>
                            </div>
                        </form>
                        <div id="update-inventory-alert" class="mt-3"></div>
                    </div>
                </div>
            `;
        }

        function updateInventory(event) {
            event.preventDefault();

            const inventoryId = document.getElementById('inventoryId').value;
            const requiredAmount = document.getElementById('updateRequiredAmount').value;
            const availableAmount = document.getElementById('updateAvailableAmount').value;
            const alertDiv = document.getElementById('update-inventory-alert');
            
            // Show loading state
            const submitButton = event.target.querySelector('button[type="submit"]');
            const originalButtonText = submitButton.innerHTML;
            submitButton.disabled = true;
            submitButton.innerHTML = `
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                Updating...
            `;

            fetch('/committee/inventoryupdate', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    Authorization: `Bearer ${localStorage.getItem('token')}`
                },
                body: JSON.stringify({ inventoryId, requiredAmount, availableAmount })
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to update inventory.');
                    }
                    return response.json();
                })
                .then(data => {
                    alertDiv.innerHTML = `
                        <div class="alert alert-success">
                            <i class="bi bi-check-circle-fill me-2"></i>
                            ${data.message}
                        </div>
                    `;
                    setTimeout(fetchInventory, 2000); // Reload inventory after 2 seconds
                })
                .catch(error => {
                    console.error('Error updating inventory:', error);
                    alertDiv.innerHTML = `
                        <div class="alert alert-danger">
                            <i class="bi bi-exclamation-triangle-fill me-2"></i>
                            An error occurred while updating the inventory.
                        </div>
                    `;
                })
                .finally(() => {
                    // Restore button state
                    submitButton.disabled = false;
                    submitButton.innerHTML = originalButtonText;
                });
        }

        function fetchExpenses() {
            const month = document.getElementById('expenseMonth').value;
            const year = document.getElementById('expenseYear').value;
            const tableContainer = document.getElementById('expenses-table');
            
            tableContainer.innerHTML = `
                <div class="d-flex justify-content-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            `;

            fetch(`/committee/expenses?month=${month}&year=${year}`, {
                method: 'GET',
                headers: {
                    Authorization: `Bearer ${localStorage.getItem('token')}`
                }
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to fetch expenses.');
                    }
                    return response.json();
                })
                .then(data => {
                    const expenses = data.expenses;
                    const totalExpenses = data.totalExpenses;
                    const monthName = new Date(0, month - 1).toLocaleString('default', { month: 'long' });

                    if (expenses.length === 0) {
                        tableContainer.innerHTML = `
                            <div class="text-center text-muted">
                                <i class="bi bi-cash" style="font-size: 2rem;"></i>
                                <p class="mt-2">No expenses found for ${monthName} ${year}.</p>
                            </div>
                        `;
                        return;
                    }

                    tableContainer.innerHTML = `
                        <div class="card shadow-sm mb-4">
                            <div class="card-header bg-coffee">
                                <div class="d-flex justify-content-between align-items-center">
                                    <h5 class="mb-0 text-white">
                                        <i class="bi bi-graph-up me-2"></i>Expenses for ${monthName} ${year}
                                    </h5>
                                    <span class="badge bg-white text-primary">
                                        Total: ₹${totalExpenses.toFixed(2)}
                                    </span>
                                </div>
                            </div>
                            <div class="card-body p-0">
                                <div class="table-responsive">
                                    <table class="table table-hover mb-0">
                                        <thead>
                                            <tr>
                                                <th>Item</th>
                                                <th>Total Cost</th>
                                                <th>Date Added</th>
                                                <th>Actions</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            ${expenses.map(expense => `
                                                <tr>
                                                    <td>${expense.name}</td>
                                                    <td>₹${parseFloat(expense.total_cost).toFixed(2)}</td>
                                                    <td>${new Date(expense.created_at).toLocaleDateString()}</td>
                                                    <td>
                                                        <button class="btn btn-sm btn-danger" onclick="deleteExpense(${expense.id})">
                                                            <i class="bi bi-trash"></i> Delete
                                                        </button>
                                                    </td>
                                                </tr>
                                            `).join('')}
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    `;
                })
                .catch(error => {
                    console.error('Error fetching expenses:', error);
                    tableContainer.innerHTML = `
                        <div class="alert alert-danger">
                            <i class="bi bi-exclamation-triangle-fill me-2"></i>
                            An error occurred while loading expenses.
                        </div>
                    `;
                });
        }

        function showAddExpenseForm() {
            const tableContainer = document.getElementById('expenses-table');
            tableContainer.innerHTML = `
                <div class="d-flex justify-content-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            `;

            // First, fetch all food items to populate the dropdown
            fetch('/committee/food-items', {
                method: 'GET',
                headers: {
                    Authorization: `Bearer ${localStorage.getItem('token')}`
                }
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to fetch food items.');
                    }
                    return response.json();
                })
                .then(data => {
                    const items = data.items;

                    if (items.length === 0) {
                        tableContainer.innerHTML = `
                            <div class="alert alert-warning">
                                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                                No food items found. Please add food items first before adding expenses.
                                <div class="mt-3">
                                    <button class="btn btn-primary" onclick="showFeature('add-food-items')">
                                        <i class="bi bi-plus-circle me-2"></i>Add Food Items
                                    </button>
                                </div>
                            </div>
                        `;
                        return;
                    }

                    // Get current month and year for default values
                    const currentDate = new Date();
                    const currentMonth = currentDate.getMonth() + 1; // JavaScript months are 0-indexed
                    const currentYear = currentDate.getFullYear();

                    tableContainer.innerHTML = `
                        <div class="card shadow-sm">
                            <div class="card-header bg-coffee">
                                <h5 class="mb-0">
                                    <i class="bi bi-cash me-2"></i>Add New Expense
                                </h5>
                            </div>
                            <div class="card-body">
                                <form id="addExpenseForm" class="form" onsubmit="addExpense(event)">
                                    <div class="row">
                                        <div class="col-md-6 mb-3">
                                            <label for="expenseFoodItem" class="form-label">Food Item:</label>
                                            <select id="expenseFoodItem" class="form-select" required>
                                                <option value="" disabled selected>Select food item...</option>
                                                ${items.map(item => `
                                                    <option value="${item.id}" data-unit="${item.unit_of_measure}" data-price="${item.unit_price}">
                                                        ${item.name} (₹${item.unit_price}/${item.unit_of_measure})
                                                    </option>
                                                `).join('')}
                                            </select>
                                        </div>
                                        <div class="col-md-6 mb-3">
                                            <label for="expenseQuantity" class="form-label">Quantity:</label>
                                            <div class="input-group">
                                                <input type="number" id="expenseQuantity" class="form-control" placeholder="Enter quantity" step="0.01" min="0" required>
                                                <span class="input-group-text" id="quantityUnit">-</span>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-6 mb-3">
                                            <label for="expenseMonth" class="form-label">Month:</label>
                                            <select id="expenseFormMonth" class="form-select" required>
                                                ${[...Array(12)].map((_, index) => `
                                                    <option value="${index + 1}" ${index + 1 === currentMonth ? 'selected' : ''}>
                                                        ${new Date(0, index).toLocaleString('default', { month: 'long' })}
                                                    </option>
                                                `).join('')}
                                            </select>
                                        </div>
                                        <div class="col-md-6 mb-3">
                                            <label for="expenseYear" class="form-label">Year:</label>
                                            <select id="expenseFormYear" class="form-select" required>
                                                ${[...Array(5)].map((_, index) => `
                                                    <option value="${currentYear - index}" ${index === 0 ? 'selected' : ''}>
                                                        ${currentYear - index}
                                                    </option>
                                                `).join('')}
                                            </select>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-12 mb-3">
                                            <label class="form-label">Estimated Total Cost:</label>
                                            <div class="input-group">
                                                <span class="input-group-text">₹</span>
                                                <input type="text" id="estimatedCost" class="form-control" readonly>
                                            </div>
                                            <small class="form-text text-muted">This is calculated based on the unit price and quantity.</small>
                                        </div>
                                    </div>
                                    <div class="d-flex gap-2 mt-4">
                                        <button type="submit" class="btn btn-primary">
                                            <i class="bi bi-plus-circle me-2"></i>Add Expense
                                        </button>
                                        <button type="button" class="btn btn-secondary" onclick="fetchExpenses()">
                                            <i class="bi bi-x-circle me-2"></i>Cancel
                                        </button>
                                    </div>
                                </form>
                                <div id="add-expense-alert" class="mt-3"></div>
                            </div>
                        </div>
                    `;

                    // Update unit and calculate estimated cost when food item is selected
                    const foodItemSelect = document.getElementById('expenseFoodItem');
                    const quantityInput = document.getElementById('expenseQuantity');
                    
                    foodItemSelect.addEventListener('change', updateEstimatedCost);
                    quantityInput.addEventListener('input', updateEstimatedCost);
                    
                    function updateEstimatedCost() {
                        const selectedOption = foodItemSelect.options[foodItemSelect.selectedIndex];
                        if (selectedOption.value) {
                            const unit = selectedOption.getAttribute('data-unit');
                            const price = parseFloat(selectedOption.getAttribute('data-price'));
                            const quantity = parseFloat(quantityInput.value) || 0;
                            
                            document.getElementById('quantityUnit').textContent = unit;
                            document.getElementById('estimatedCost').value = (price * quantity).toFixed(2);
                        } else {
                            document.getElementById('quantityUnit').textContent = '-';
                            document.getElementById('estimatedCost').value = '';
                        }
                    }
                })
                .catch(error => {
                    console.error('Error fetching food items:', error);
                    tableContainer.innerHTML = `
                        <div class="alert alert-danger">
                            <i class="bi bi-exclamation-triangle-fill me-2"></i>
                            An error occurred while loading food items.
                        </div>
                    `;
                });
        }

        function addExpense(event) {
            event.preventDefault();

            const foodItemId = document.getElementById('expenseFoodItem').value;
            const quantity = document.getElementById('expenseQuantity').value;
            const month = document.getElementById('expenseFormMonth').value;
            const year = document.getElementById('expenseFormYear').value;
            const alertDiv = document.getElementById('add-expense-alert');
            
            // Show loading state
            const submitButton = event.target.querySelector('button[type="submit"]');
            const originalButtonText = submitButton.innerHTML;
            submitButton.disabled = true;
            submitButton.innerHTML = `
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                Adding...
            `;

            fetch('/committee/expenses', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    Authorization: `Bearer ${localStorage.getItem('token')}`
                },
                body: JSON.stringify({ foodItemId, quantity, month, year })
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to add expense.');
                    }
                    return response.json();
                })
                .then(data => {
                    alertDiv.innerHTML = `
                        <div class="alert alert-success">
                            <i class="bi bi-check-circle-fill me-2"></i>
                            ${data.message}
                        </div>
                    `;
                    
                    // Update the expense month and year in the main form to match what was just added
                    document.getElementById('expenseMonth').value = month;
                    document.getElementById('expenseYear').value = year;
                    
                    setTimeout(() => {
                        fetchExpenses(); // Reload expenses after 2 seconds
                    }, 2000);
                })
                .catch(error => {
                    console.error('Error adding expense:', error);
                    alertDiv.innerHTML = `
                        <div class="alert alert-danger">
                            <i class="bi bi-exclamation-triangle-fill me-2"></i>
                            An error occurred while adding the expense.
                        </div>
                    `;
                })
                .finally(() => {
                    // Restore button state
                    submitButton.disabled = false;
                    submitButton.innerHTML = originalButtonText;
                });
        }

        function deleteExpense(id) {
            if (!confirm('Are you sure you want to delete this expense?')) return;

            fetch(`/committee/expenses/${id}`, {
                method: 'DELETE',
                headers: {
                    Authorization: `Bearer ${localStorage.getItem('token')}`
                }
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to delete expense.');
                    }
                    return response.json();
                })
                .then(data => {
                    alert(data.message);
                    fetchExpenses(); // Refresh the expenses list
                })
                .catch(error => {
                    console.error('Error deleting expense:', error);
                    alert('An error occurred while deleting the expense.');
                });
        }

        function capitalize(text) {
            return text.charAt(0).toUpperCase() + text.slice(1);
        }
    </script>
</body>
</html>
