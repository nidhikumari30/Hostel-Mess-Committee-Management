<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Student Dashboard | Mess Management Portal</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/css/styles.css">
  </head>
  <body>
    <!-- Navbar -->
    <nav class="navbar navbar-expand-lg navbar-dark">
      <div class="container">
        <a class="navbar-brand" href="/">Mess Management Portal</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
          <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
          <ul class="navbar-nav ms-auto">
            <li class="nav-item">
              <a href="/auth/studentprofile" class="btn btn-outline-primary me-2">
                <i class="bi bi-person-circle"></i> Profile
              </a>
            </li>
            <li class="nav-item">
              <a href="javascript:void(0);" onclick="logoutUser()" class="btn btn-outline-danger">
                <i class="bi bi-box-arrow-right"></i> Logout
              </a>
            </li>
          </ul>
        </div>
      </div>
    </nav>

    <!-- Dashboard Layout -->
    <div class="dashboard-container">
      <!-- Sidebar -->
      <div class="sidebar">
        <h4>Hello, <span id="userName">Student</span>!</h4>
        <a href="#mess-timings" class="sidebar-option active" onclick="showFeature('mess-timings')">
          <i class="bi bi-calendar3"></i> View Mess Timings
        </a>
        <a href="#mess-menu" class="sidebar-option" onclick="showFeature('mess-menu')">
          <i class="bi bi-book-half"></i> View Mess Menu
        </a>
        <a href="#notices" class="sidebar-option" onclick="showFeature('notices')">
          <i class="bi bi-bell"></i> View Important Notices
        </a>
        <a href="#feedback" class="sidebar-option" onclick="showFeature('feedback')">
          <i class="bi bi-chat-square-text"></i> Submit Feedback
        </a>
        <a href="#rebate" class="sidebar-option" onclick="showFeature('rebate')">
          <i class="bi bi-cash"></i> Apply for Rebate
        </a>
        <a href="#view-rebates" class="sidebar-option" onclick="showFeature('view-rebates')">
          <i class="bi bi-info-circle"></i> View Your Rebates
        </a>
      </div>

      <!-- Content Area -->
      <div class="content">
        <div id="feature-content">
          <div class="d-flex align-items-center justify-content-center" style="height: 80vh;">
            <div class="text-center">
              <i class="bi bi-arrow-left-circle" style="font-size: 3rem; color: var(--primary);"></i>
              <h3 class="mt-3">Welcome to your dashboard!</h3>
              <p class="text-muted">Select an option from the sidebar to get started.</p>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>

    <!-- JavaScript for Sidebar Interaction -->
    <script>
      // Fetch authenticated data after the page loads
      document.addEventListener("DOMContentLoaded", () => {
        fetch("/auth/studentdashboard/data", {
          method: "GET",
          headers: {
            Authorization: `Bearer ${localStorage.getItem("token")}`, // Send the token
          },
        })
          .then((response) => {
            if (!response.ok) {
              throw new Error("Authorization failed");
            }
            return response.json();
          })
          .then((data) => {
            console.log("Authenticated data:", data);
            document.getElementById("userName").innerText = data.user.name; // Update the user name
            
            // Automatically show mess timings on load
            showFeature('mess-timings');
          })
          .catch((error) => {
            console.error("Error fetching data:", error);
            alert("Session expired. Redirecting to login.");
            window.location.href = "/auth/login"; // Redirect to login page
          });
      });

      function showFeature(feature) {
        // Reset active class for sidebar options
        const options = document.querySelectorAll(".sidebar-option");
        options.forEach((option) => option.classList.remove("active"));

        // Set the clicked option as active
        document.querySelector(`[href="#${feature}"]`).classList.add("active");

        // Dynamically update the content area
        const content = document.getElementById("feature-content");

        if (feature === "mess-timings") {
          // Generate the day selector scrollbar with a placeholder option
          content.innerHTML = `
            <div class="card shadow-sm">
              <div class="card-header bg-coffee">
                <h3 class="card-title mb-0"><i class="bi bi-calendar3 me-2"></i>Mess Timings</h3>
              </div>
              <div class="card-body">
                <p class="card-text text-muted mb-4">View mess timings for each day of the week</p>
                
                <div class="mb-4">
                  <label for="daySelector" class="form-label">Select a day to view mess timings:</label>
                  <select id="daySelector" class="form-select" onchange="getMessTimings(this.value)">
                    <option value="" disabled selected>Choose a day...</option>
                    <option value="Monday">Monday</option>
                    <option value="Tuesday">Tuesday</option>
                    <option value="Wednesday">Wednesday</option>
                    <option value="Thursday">Thursday</option>
                    <option value="Friday">Friday</option>
                    <option value="Saturday">Saturday</option>
                    <option value="Sunday">Sunday</option>
                  </select>
                </div>
                
                <div id="mess-timings-display" class="mt-4">
                  <div class="text-center text-muted">
                    <i class="bi bi-arrow-down-circle" style="font-size: 2rem;"></i>
                    <p class="mt-2">Please select a day to view mess timings</p>
                  </div>
                </div>
              </div>
            </div>
          `;
        } else if (feature === "mess-menu") {
          content.innerHTML = `
            <div class="card shadow-sm">
              <div class="card-header bg-coffee">
                <h3 class="card-title mb-0"><i class="bi bi-book-half me-2"></i>Mess Menu</h3>
              </div>
              <div class="card-body">
                <p class="card-text text-muted mb-4">View the mess menu for each day of the week</p>
                
                <div class="mb-4">
                  <label for="daySelector" class="form-label">Choose a day:</label>
                  <select id="daySelector" class="form-select" onchange="getMenu(this.value)">
                    <option value="" disabled selected>Select a day...</option>
                    <option value="Monday">Monday</option>
                    <option value="Tuesday">Tuesday</option>
                    <option value="Wednesday">Wednesday</option>
                    <option value="Thursday">Thursday</option>
                    <option value="Friday">Friday</option>
                    <option value="Saturday">Saturday</option>
                    <option value="Sunday">Sunday</option>
                  </select>
                </div>
                
                <div id="menu-display" class="mt-4">
                  <div class="text-center text-muted">
                    <i class="bi bi-arrow-down-circle" style="font-size: 2rem;"></i>
                    <p class="mt-2">Please select a day to view the menu</p>
                  </div>
                </div>
              </div>
            </div>
          `;
        } else if (feature === "notices") {
          content.innerHTML = `
            <div class="card shadow-sm">
              <div class="card-header bg-coffee">
                <h3 class="card-title mb-0"><i class="bi bi-bell me-2"></i>Important Notices</h3>
              </div>
              <div class="card-body">
                <p class="card-text text-muted mb-4">Stay updated with the latest announcements from the mess committee</p>
                
                <div id="notices-display" class="mt-4">
                  <div class="d-flex justify-content-center">
                    <div class="spinner-border text-primary" role="status">
                      <span class="visually-hidden">Loading...</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          `;
          getNotices(); // Fetch and display the notices
        } else if (feature === "feedback") {
          content.innerHTML = `
            <div class="card shadow-sm">
              <div class="card-header bg-coffee">
                <h3 class="card-title mb-0"><i class="bi bi-chat-square-text me-2"></i>Submit Feedback</h3>
              </div>
              <div class="card-body">
                <p class="card-text text-muted mb-4">Share your thoughts and suggestions to help us improve</p>
                
                <form id="feedbackForm" class="form" onsubmit="submitFeedback(event)">
                  <div class="mb-3">
                    <label for="feedbackMessage" class="form-label">Your Feedback:</label>
                    <textarea id="feedbackMessage" class="form-control" rows="6" placeholder="Please share your feedback about the mess. If you're commenting on food quality, please specify the day." required></textarea>
                  </div>
                  <button type="submit" class="btn btn-primary">
                    <i class="bi bi-send me-2"></i>Submit Feedback
                  </button>
                </form>
                
                <div id="feedback-alert" class="alert alert-success mt-4 d-none" role="alert"></div>
              </div>
            </div>
          `;
        } else if (feature === "rebate") {
          content.innerHTML = `
            <div class="card shadow-sm">
              <div class="card-header bg-coffee">
                <h3 class="card-title mb-0"><i class="bi bi-cash me-2"></i>Apply for Rebate</h3>
              </div>
              <div class="card-body">
                <p class="card-text text-muted mb-4">Request a mess fee rebate for days you'll be away</p>
                
                <div class="alert alert-info mb-4">
                  <i class="bi bi-info-circle-fill me-2"></i>
                  <strong>Important:</strong> Rebate applications must be submitted at least 2 days in advance and for a minimum of 3 days.
                </div>
                
                <form id="rebateForm" class="form" onsubmit="submitRebate(event)">
                  <div class="row">
                    <div class="col-md-6 mb-3">
                      <label for="startDate" class="form-label">Start Date:</label>
                      <input type="date" id="startDate" class="form-control" required>
                    </div>
                    <div class="col-md-6 mb-3">
                      <label for="endDate" class="form-label">End Date:</label>
                      <input type="date" id="endDate" class="form-control" required>
                    </div>
                  </div>
                  <button type="submit" class="btn btn-primary">
                    <i class="bi bi-send me-2"></i>Submit Rebate Application
                  </button>
                </form>
                
                <div id="rebate-alert" class="mt-4"></div>
              </div>
            </div>
          `;
        } else if (feature === "view-rebates") {
          content.innerHTML = `
            <div class="card shadow-sm">
              <div class="card-header bg-coffee">
                <h3 class="card-title mb-0"><i class="bi bi-info-circle me-2"></i>Your Rebates</h3>
              </div>
              <div class="card-body">
                <p class="card-text text-muted mb-4">View the status of your rebate applications</p>
                
                <div id="rebates-display" class="mt-4">
                  <div class="d-flex justify-content-center">
                    <div class="spinner-border text-primary" role="status">
                      <span class="visually-hidden">Loading...</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          `;
          getRebates();
        } else {
          content.innerHTML = `
            <div class="d-flex align-items-center justify-content-center" style="height: 80vh;">
              <div class="text-center">
                <i class="bi bi-arrow-left-circle" style="font-size: 3rem; color: var(--primary);"></i>
                <h3 class="mt-3">Welcome to your dashboard!</h3>
                <p class="text-muted">Select an option from the sidebar to get started.</p>
              </div>
            </div>
          `;
        }
      }

      
      function logoutUser() {
        // Call the backend logout route
        fetch("/auth/logout", {
          method: "GET",
          headers: {
            Authorization: `Bearer ${localStorage.getItem("token")}`, // Send token in headers
          },
        })
          .then((response) => {
            if (!response.ok) {
              throw new Error("Logout failed.");
            }
            return response.json();
          })
          .then((data) => {
            console.log(data.message); // Debugging
            // Remove token from localStorage
            localStorage.removeItem("token");
            alert("You have been logged out.");
            window.location.href = "/"; // Redirect to the index page
          })
          .catch((error) => {
            console.error("Error during logout:", error);
            alert("An error occurred while logging out.");
          });
      }

      function getMessTimings(day) {
        if (!day) return; // Avoid fetching if no day is selected

        const display = document.getElementById("mess-timings-display");
        display.innerHTML = `
          <div class="d-flex justify-content-center">
            <div class="spinner-border text-primary" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
          </div>
        `; // Show loading spinner

        // Fetch mess timings for the selected day
        fetch(`/student/mess-timings/${day}`, {
          method: "GET",
          headers: {
            Authorization: `Bearer ${localStorage.getItem("token")}`, // Include the token
          },
        })
          .then((response) => {
            if (!response.ok) {
              throw new Error("Failed to fetch mess timings.");
            }
            return response.json();
          })
          .then((data) => {
            const timings = data.timings;

            // Generate cards for breakfast, lunch, and dinner
            display.innerHTML = `
              <div class="row g-4">
                <div class="col-md-4">
                  <div class="card h-100 shadow-sm fade-in">
                    <div class="card-header bg-coffee">
                      <h5 class="card-title text-center mb-0">
                        <i class="bi bi-sunrise me-2"></i>Breakfast
                      </h5>
                    </div>
                    <div class="card-body text-center">
                      <hr>
                      <p class="card-text"><strong>From:</strong> ${timings.breakfast_from}</p>
                      <p class="card-text"><strong>To:</strong> ${timings.breakfast_to}</p>
                    </div>
                  </div>
                </div>
                
                <div class="col-md-4">
                  <div class="card h-100 shadow-sm fade-in" style="animation-delay: 0.2s;">
                    <div class="card-header bg-chocolate">
                      <h5 class="card-title text-center mb-0">
                        <i class="bi bi-brightness-high me-2"></i>Lunch
                      </h5>
                    </div>
                    <div class="card-body text-center">
                      <hr>
                      <p class="card-text"><strong>From:</strong> ${timings.lunch_from}</p>
                      <p class="card-text"><strong>To:</strong> ${timings.lunch_to}</p>
                    </div>
                  </div>
                </div>
                
                <div class="col-md-4">
                  <div class="card h-100 shadow-sm fade-in" style="animation-delay: 0.4s;">
                    <div class="card-header bg-forest">
                      <h5 class="card-title text-center mb-0">
                        <i class="bi bi-moon-stars me-2"></i>Dinner
                      </h5>
                    </div>
                    <div class="card-body text-center">
                      <hr>
                      <p class="card-text"><strong>From:</strong> ${timings.dinner_from}</p>
                      <p class="card-text"><strong>To:</strong> ${timings.dinner_to}</p>
                    </div>
                  </div>
                </div>
              </div>
            `;
          })
          .catch((error) => {
            console.error("Error fetching mess timings:", error);
            display.innerHTML = `
              <div class="alert alert-danger">
                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                An error occurred while fetching mess timings.
              </div>
            `;
          });
      }

      function getMenu(day) {
        if (!day) return; // Avoid fetching if no day is selected

        const display = document.getElementById("menu-display");
        display.innerHTML = `
          <div class="d-flex justify-content-center">
            <div class="spinner-border text-primary" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
          </div>
        `; // Show loading spinner

        // Fetch the menu for the selected day
        fetch(`/student/menu?day=${day}`, {
          method: "GET",
          headers: {
            Authorization: `Bearer ${localStorage.getItem("token")}`, // Include the token
          },
        })
          .then((response) => {
            if (!response.ok) {
              throw new Error("Failed to fetch menu.");
            }
            return response.json();
          })
          .then((data) => {
            const menuItems = data.menu;

            // Generate a single row containing three side-by-side cards
            display.innerHTML = `
              <div class="row g-4">
                ${menuItems.map((item, index) => `
                  <div class="col-md-4">
                    <div class="card h-100 shadow-sm fade-in no-bg-card" style="animation-delay: ${index * 0.2}s;">
                      <div class="card-header ${getMealTypeHeaderClass(item.meal_type)}">
                        <h5 class="card-title text-center mb-0">
                          <i class="${getMealTypeIcon(item.meal_type)} me-2"></i>${item.meal_type.charAt(0).toUpperCase() + item.meal_type.slice(1)}
                        </h5>
                      </div>
                      <div class="card-body ">
                        <ul class="list-group list-group-flush" style = "background-color: transparent; border-bottom: 1px solid rgba(0,0,0,0.05);">
                          ${item.items_list.split(",").map(menuItem => `
                            <li class="list-group-item border-0 px-0">${menuItem.trim()}</li>
                          `).join("")}
                        </ul>
                      </div>
                    </div>
                  </div>
                `).join("")}
              </div>
            `;
          })
          .catch((error) => {
            console.error("Error fetching menu:", error);
            display.innerHTML = `
              <div class="alert alert-danger">
                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                An error occurred while fetching the menu.
              </div>
            `;
          });
      }

      function getMealTypeIcon(mealType) {
        switch(mealType) {
          case "breakfast": return "bi bi-sunrise";
          case "lunch": return "bi bi-brightness-high";
          case "dinner": return "bi bi-moon-stars";
          default: return "bi bi-question-circle";
        }
      }

      function getMealTypeHeaderClass(mealType) {
        switch(mealType) {
          case "breakfast": return "bg-coffee";
          case "lunch": return "bg-chocolate";
          case "dinner": return "bg-forest";
          default: return "bg-light";
        }
      }

      function getNotices() {
        const display = document.getElementById("notices-display");

        // Fetch the most recent notices
        fetch("/student/notices", {
          method: "GET",
          headers: {
            Authorization: `Bearer ${localStorage.getItem("token")}`, // Include the token
          },
        })
          .then((response) => {
            if (!response.ok) {
              throw new Error("Failed to fetch notices.");
            }
            return response.json();
          })
          .then((data) => {
            const notices = data.notices;

            if (notices.length === 0) {
              display.innerHTML = `
                <div class="text-center text-muted">
                  <i class="bi bi-info-circle" style="font-size: 2rem;"></i>
                  <p class="mt-2">No notices available at the moment.</p>
                </div>
              `;
              return;
            }

            // Generate vertical cards for each notice
            display.innerHTML = notices
              .map((notice, index) => `
                <div class="card mb-4 shadow-sm fade-in" style="animation-delay: ${index * 0.1}s;">
                  <div class="card-header bg-coffee">
                    <h5 class="card-title mb-0">
                      <i class="bi bi-bell-fill me-2"></i>${notice.title}
                    </h5>
                  </div>
                  <div class="card-body">
                    <div class="d-flex justify-content-end mb-3">
                      <span class="badge bg-coffee">
                        ${new Date(notice.created_at).toLocaleDateString()}
                      </span>
                    </div>
                    <p class="card-text">${notice.content}</p>
                    <div class="d-flex align-items-center mt-3 text-muted">
                      <i class="bi bi-person-circle me-2"></i>
                      <small>Posted by: ${notice.posted_by}</small>
                    </div>
                  </div>
                </div>
              `)
              .join("");
          })
          .catch((error) => {
            console.error("Error fetching notices:", error);
            display.innerHTML = `
              <div class="alert alert-danger">
                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                An error occurred while fetching notices.
              </div>
            `;
          });
      }

      function submitFeedback(event) {
        event.preventDefault(); // Prevent page reload on form submission

        const feedbackMessage = document.getElementById("feedbackMessage").value;
        const alertDiv = document.getElementById("feedback-alert");
        
        // Show loading state
        const submitButton = event.target.querySelector('button[type="submit"]');
        const originalButtonText = submitButton.innerHTML;
        submitButton.disabled = true;
        submitButton.innerHTML = `
          <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
          Submitting...
        `;

        // Send feedback data to the backend
        fetch("/student/feedback", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${localStorage.getItem("token")}`, // Include the token
          },
          body: JSON.stringify({ message: feedbackMessage }), // Send feedback message
        })
          .then((response) => {
            if (!response.ok) {
              throw new Error("Failed to submit feedback.");
            }
            return response.json();
          })
          .then((data) => {
            alertDiv.classList.remove("d-none", "alert-danger");
            alertDiv.classList.add("alert-success");
            alertDiv.innerHTML = `
              <i class="bi bi-check-circle-fill me-2"></i>
              ${data.message}
            `; // Set success message
            document.getElementById("feedbackForm").reset(); // Reset the form
          })
          .catch((error) => {
            console.error("Error submitting feedback:", error);
            alertDiv.classList.remove("d-none", "alert-success");
            alertDiv.classList.add("alert-danger");
            alertDiv.innerHTML = `
              <i class="bi bi-exclamation-triangle-fill me-2"></i>
              An error occurred while submitting your feedback.
            `; // Display error alert
          })
          .finally(() => {
            // Restore button state
            submitButton.disabled = false;
            submitButton.innerHTML = originalButtonText;
          });
      }

      function submitRebate(event) {
        event.preventDefault(); // Prevent form reload

        const startDate = document.getElementById("startDate").value;
        const endDate = document.getElementById("endDate").value;
        const alertDiv = document.getElementById("rebate-alert");
        
        // Show loading state
        const submitButton = event.target.querySelector('button[type="submit"]');
        const originalButtonText = submitButton.innerHTML;
        submitButton.disabled = true;
        submitButton.innerHTML = `
          <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
          Submitting...
        `;

        // Simple frontend validation
        if (!startDate || !endDate) {
          alertDiv.innerHTML = `
            <div class="alert alert-danger">
              <i class="bi bi-exclamation-triangle-fill me-2"></i>
              Please provide both start and end dates.
            </div>
          `;
          submitButton.disabled = false;
          submitButton.innerHTML = originalButtonText;
          return;
        }

        if (new Date(endDate) <= new Date(startDate)) {
          alertDiv.innerHTML = `
            <div class="alert alert-danger">
              <i class="bi bi-exclamation-triangle-fill me-2"></i>
              End date must be after start date.
            </div>
          `;
          submitButton.disabled = false;
          submitButton.innerHTML = originalButtonText;
          return;
        }

        // Send data to the backend
        fetch("/student/rebate/apply", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${localStorage.getItem("token")}`, // Include the token
          },
          body: JSON.stringify({ startDate, endDate }), // Send start and end dates
        })
          .then((response) => {
            if (!response.ok) {
              return response.json().then((err) => {
                throw new Error(
                  err.message || "Failed to submit rebate application."
                );
              });
            }
            return response.json();
          })
          .then((data) => {
            alertDiv.innerHTML = `
              <div class="alert alert-success">
                <i class="bi bi-check-circle-fill me-2"></i>
                ${data.message}
              </div>
            `;
            document.getElementById("rebateForm").reset(); // Reset the form
          })
          .catch((error) => {
            alertDiv.innerHTML = `
              <div class="alert alert-danger">
                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                ${error.message}
              </div>
            `;
          })
          .finally(() => {
            // Restore button state
            submitButton.disabled = false;
            submitButton.innerHTML = originalButtonText;
          });
      }

      function getRebates() {
        const display = document.getElementById("rebates-display");

        // Fetch rebate data from the backend
        fetch("/student/rebate/my", {
          method: "GET",
          headers: {
            Authorization: `Bearer ${localStorage.getItem("token")}`, // Include the token
          },
        })
          .then((response) => {
            if (!response.ok) {
              throw new Error("Failed to fetch rebate data.");
            }
            return response.json();
          })
          .then((data) => {
            const rebates = data.rebates;

            if (rebates.length === 0) {
              display.innerHTML = `
                <div class="text-center text-muted">
                  <i class="bi bi-info-circle" style="font-size: 2rem;"></i>
                  <p class="mt-2">You haven't applied for any rebates yet.</p>
                </div>
              `;
              return;
            }

            // Generate cards for each rebate application
            display.innerHTML = `
              <div class="row g-4">
                ${rebates.map((rebate, index) => `
                  <div class="col-md-6">
                    <div class="card shadow-sm fade-in" style="animation-delay: ${index * 0.1}s;">
                      <div class="card-header ${getStatusHeaderClass(rebate.status)}">
                        <div class="d-flex justify-content-between align-items-center">
                          <span class="badge ${getStatusBadgeClass(rebate.status)}">
                            <i class="${getStatusIcon(rebate.status)} me-1"></i>
                            ${capitalize(rebate.status)}
                          </span>
                          <small class="text-muted">Applied on: ${new Date(rebate.created_at).toLocaleDateString()}</small>
                        </div>
                      </div>
                      <div class="card-body">
                        <div class="d-flex justify-content-between mb-3">
                          <div>
                            <p class="mb-1"><strong>Start Date:</strong></p>
                            <p class="card-text">${new Date(rebate.start_date).toLocaleDateString()}</p>
                          </div>
                          <div>
                            <p class="mb-1"><strong>End Date:</strong></p>
                            <p class="card-text">${new Date(rebate.end_date).toLocaleDateString()}</p>
                          </div>
                          <div>
                            <p class="mb-1"><strong>Duration:</strong></p>
                            <p class="card-text">${rebate.duration} days</p>
                          </div>
                        </div>
                        ${rebate.status === "approved" 
                          ? `<div class="alert alert-success">
                              <i class="bi bi-check-circle-fill me-2"></i>
                              Congratulations! Your rebate has been approved. You will receive a refund of ₹${rebate.rebate_amt} in 3-4 working days.
                            </div>` 
                          : rebate.status === "pending"
                          ? `<div class="alert alert-warning">
                              <i class="bi bi-hourglass-split me-2"></i>
                              Your rebate application is pending. Please wait till it is reviewed by the committee members.
                            </div>`
                          : rebate.status === "rejected"
                          ? `<div class="alert alert-danger">
                              <i class="bi bi-x-circle-fill me-2"></i>
                              Your rebate application was not approved by the committee members.
                            </div>`
                          : ""
                        }
                      </div>
                    </div>
                  </div>
                `).join("")}
              </div>
            `;
          })
          .catch((error) => {
            console.error("Error fetching rebates:", error);
            display.innerHTML = `
              <div class="alert alert-danger">
                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                An error occurred while loading your rebates.
              </div>
            `;
          });
      }

      function getStatusIcon(status) {
        switch (status) {
          case "pending":
            return "bi bi-hourglass-split";
          case "approved":
            return "bi bi-check-circle-fill";
          case "rejected":
            return "bi bi-x-circle-fill";
          default:
            return "bi bi-question-circle-fill";
        }
      }

      function getStatusBadgeClass(status) {
        switch (status) {
          case "pending":
            return "bg-warning text-dark";
          case "approved":
            return "bg-success";
          case "rejected":
            return "bg-danger";
          default:
            return "bg-secondary";
        }
      }

      function getStatusHeaderClass(status) {
        switch (status) {
          case "pending":
            return "bg-warning bg-opacity-10";
          case "approved":
            return "bg-forest";
          case "rejected":
            return "bg-danger bg-opacity-10";
          default:
            return "bg-coffee";
        }
      }

      function capitalize(text) {
        return text.charAt(0).toUpperCase() + text.slice(1);
      }
    </script>
  </body>
</html>
